// These common functions will be included in the build of every other shader.

float RemapVal(float input, float in_lo, float in_hi, float out_lo, float out_hi)
{
	return mix(out_lo, out_hi, (input - in_lo)/(in_hi - in_lo));
}

float RemapValClamped(float input, float in_lo, float in_hi, float out_lo, float out_hi)
{
	return mix(out_lo, out_hi, clamp((input - in_lo)/(in_hi - in_lo), 0.0, 1.0));
}

float RemapValSmooth(float input, float in_lo, float in_hi, float out_lo, float out_hi)
{
	return mix(out_lo, out_hi, smoothstep(in_lo, in_hi, input));
}

float length_sqr(vec3 v)
{
	return v.x*v.x + v.y*v.y + v.z*v.z;
}

float length_sqr(vec2 v)
{
	return v.x*v.x + v.y*v.y;
}

float length_2d_sqr(vec3 v)
{
	return v.x*v.x + v.y*v.y;
}

float Bias(float x, float lerp)
{
	if (lerp == 0.5)
		return x;

	return pow(x, log(lerp) * -1.4427);
}

float DistanceToLineSegmentSqr(vec3 p, vec3 v1, vec3 v2)
{
	float r;
	vec3 v = v2 - v1;
	vec3 w = p - v1;
	float c1 = dot(w, v);
	if (c1 < 0.0)
		r = length_sqr(v1-p);
	else
	{
		float c2 = dot(v, v);
		if (c2 < c1)
			r = length_sqr(v2-p);
		else
		{
			float b = c1/c2;
			vec3 vb = v1 + v*b;
			r = length_sqr(vb - p);
		}
	}
	return r;
}

float Rand(vec2 co) {
	return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

vec3 g_fog = vec3(78.0/255.0, 188.0/255.0, 239.0/255.0);

vec3 AddFog(vec3 color, vec3 position, vec3 camera)
{
	float ramp = exp(-0.096 * length(position - camera));

	return mix(g_fog, color, ramp);
}
